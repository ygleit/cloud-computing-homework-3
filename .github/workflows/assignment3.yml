name: assignment3

on: push
jobs:
  build:
    runs-on: ubuntu-latest
    continue-on-error: false
    steps:
      - name: Checkout workflow
        uses: actions/checkout@v3
        
      - name: Set start date 
        run: echo "DATE=$(date -Iminutes)" >> log.txt
        
      - name: Add submitters names
        run: echo "Yonathan Gleit, Nir Sharon" >> log.txt
      
      - name: Setup Docker
        uses: docker/setup-buildx-action@v2
      
      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          dockerfile: Dockerfile
          push: false
          tags: cloud-computing-homework-3
          outputs: type=docker, dest=/tmp/image.tar
          
      
      - name: Upload Image
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: cloud-computing-homework-3
          path: /tmp/image.tar
      
      - name: If Build Failed
        if: failure()
        run: echo "image not able to be built" >> log.txt
        
      - name: Check If Image Was Successfully bulid
        if: success()
        run: echo "image successfully built" >> log.txt
          
      - name: Upload Log File
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: log
          path: log.txt

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
    
      - name: Checkout workflow
        uses: actions/checkout@v3
    
      - name: Download Log File
        uses: actions/download-artifact@v3
        with:
          name: log
      
      - name: Download Docker Image
        uses: actions/download-artifact@v3
        with:
          name: cloud-computing-homework-3
        
      - name: Load Docker Image From Previous Job
        run: docker load --input ./image.tar
        
      - name: Run Docker Image
        run: docker run -p 8000:8000 -d cloud-computing-homework-3
          
      - name: Check Docker Container Status
        run: |
          image_name="cloud-computing-homework-3"

          # Check if the container is running
          if docker ps --format '{{.Image}}' | grep -q "$image_name"; then
            echo "Container up and running" >> log.txt
          else
            echo "Container failed to run" >> log.txt
          fi
        
      - name: Set up Python
        uses: actions/setup-python@v4
        
      - name: Install dependencies
        run: | 
          python -m pip install --upgrade pip
          pip install pytest
          pip install requests
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          
      - name: Run tests with pytest
        run: |
          cd tests
          pytest -v assn3_tests.py > assn3_test_results.txt
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: GH-test-results
          path: ./tests/assn3_test_results.txt
      
      - name: Tests failed
        if: failure()
        run: echo "tests failed" >> log.txt
      
      - name: Tests succeeded
        if: success()
        run: echo "tests succeeded" >> log.txt
      
      - name: Upload Log File
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: log
          path: log.txt
          
  query:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout workflow
      uses: actions/checkout@v3
      
    - name: Download Docker Image
      uses: actions/download-artifact@v3
      with:
        name: cloud-computing-homework-3
        
    - name: Load Docker Image From Previous Job
      run: docker load --input ./image.tar
        
    - name: Run Docker Image
      run: docker run -p 8000:8000 -d cloud-computing-homework-3
      
    - name: Query service
      if: success()
      run: |
        cat query.txt | while read -r dish_name; do
          id=$(curl -s -X POST -H "Content-Type: application/json" -d "{\"name\": \"$dish_name\"}" http://127.0.0.1:8000/dishes)
          dish=$(curl -s http://127.0.0.1:8000/dishes/$id)
          cal=$(echo "$dish" | jq -r ".cal")
          sodium=$(echo "$dish" | jq -r ".sodium")
          sugar=$(echo "$dish" | jq -r ".sugar")
          echo "$dish_name contains $cal calories, $sodium mgs of sodium, and $sugar grams of sugar" >> response.txt
        done
      
    - name: Upload Response File
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: response
        path: response.txt
    
        
      
    
      
          
